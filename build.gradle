buildscript {
    ext {
        kotlin_version = "1.4.10"
        lifecycle_version = "2.2.0"

        OSSRH_USERNAME = project.properties['OSSRH_USERNAME'] ?: System.getenv('OSSRH_USERNAME')
        OSSRH_PASSWORD = project.properties['OSSRH_PASSWORD'] ?: System.getenv('OSSRH_PASSWORD')
    }
    repositories {
        google()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:4.1.1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:1.4.10.2"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.21.2"
        classpath "de.marcphilipp.gradle:nexus-publish-plugin:0.4.0"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'de.marcphilipp.nexus-publish'

group = 'io.johnsonlee'
version = '1.0.0'

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName project.version
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    defaultPublishConfig project.name.endsWith('-SNAPSHOT') ? 'debug' : 'release'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.activity:activity-ktx:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'
    dokkaHtmlPlugin("org.jetbrains.dokka:kotlin-as-java-plugin:1.4.10.2")
}

dokkaHtml.configure {
    dokkaSourceSets {
        named("main") {
            noAndroidSdkLink.set(false)
        }
    }
}

task androidJavadocs(type: Javadoc, dependsOn: dokkaHtml) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: dokkaHtml) {
    archiveClassifier.set('javadoc')
    from dokkaHtml.outputDirectory
}


task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
            }
            debug(MavenPublication) {
                from components.debug
            }
            withType(MavenPublication).configureEach {
                groupId = project.group
                artifactId = project.name
                version = project.version

                artifact androidSourcesJar
                artifact androidJavadocsJar

                pom {
                    name = project.name
                    url = "https://github.com/johnsonlee/${project.name}"
                    description = project.description ?: project.name

                    scm {
                        connection = "scm:git:git://github.com/johnsonlee/${project.name}.git"
                        developerConnection = "scm:git:git@github.com:johnsonlee/${project.name}.git"
                        url = "https://github.com/johnsonlee/${project.name}"
                    }

                    licenses {
                        license {
                            name = 'Apache License'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0'
                        }
                    }

                    withXml { xml ->
                        xml.asNode().appendNode('developers').appendNode('developer').with {
                            appendNode('id', 'johnsonlee')
                            appendNode('email', 'g.johnsonlee@gmail.com')
                        }
                    }
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = OSSRH_USERNAME
            password = OSSRH_PASSWORD
        }
    }
}

nexusStaging {
    packageGroup = "io.johnsonlee"
    username = OSSRH_USERNAME
    password = OSSRH_PASSWORD
    numberOfRetries = 50
    delayBetweenRetriesInMillis = 3000
}

signing {
    sign publishing.publications
}
